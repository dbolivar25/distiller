{
  "Comment": "Audio file processing with Transcribe, Comprehend, and Bedrock",
  "StartAt": "ValidateInput",
  "States": {
    "ValidateInput": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.bucket",
              "IsPresent": true
            },
            {
              "Variable": "$.key",
              "IsPresent": true
            },
            {
              "Variable": "$.languageCode",
              "IsPresent": true
            }
          ],
          "Next": "StartTranscriptionJob"
        }
      ],
      "Default": "Fail"
    },
    "StartTranscriptionJob": {
      "Type": "Task",
      "Parameters": {
        "Media": {
          "MediaFileUri.$": "States.Format('s3://{}/{}', $.bucket, $.key)"
        },
        "LanguageCode.$": "$.languageCode",
        "TranscriptionJobName.$": "States.Format('{}-{}', $.key, States.UUID())",
        "OutputBucketName.$": "$.bucket",
        "OutputKey.$": "States.Format('{}-transcript.json', $.key)",
        "Settings": {
          "ShowSpeakerLabels": true,
          "MaxSpeakerLabels": 10
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob",
      "Next": "Wait 30 Seconds",
      "ResultPath": "$.startTranscriptionResult"
    },
    "Wait 30 Seconds": {
      "Type": "Wait",
      "Next": "GetTranscriptionJob",
      "Seconds": 30
    },
    "GetTranscriptionJob": {
      "Type": "Task",
      "Parameters": {
        "TranscriptionJobName.$": "$.startTranscriptionResult.TranscriptionJob.TranscriptionJobName"
      },
      "Resource": "arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob",
      "Next": "Job Complete?",
      "ResultPath": "$.getTranscriptionResult",
      "ResultSelector": {
        "status.$": "$.TranscriptionJob.TranscriptionJobStatus"
      }
    },
    "Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.getTranscriptionResult.status",
          "StringEquals": "FAILED",
          "Next": "Fail"
        },
        {
          "Variable": "$.getTranscriptionResult.status",
          "StringEquals": "COMPLETED",
          "Next": "Extract Transcript"
        }
      ],
      "Default": "Wait 30 Seconds"
    },
    "Extract Transcript": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:816069165876:function:extract_transcript_rs",
        "Payload": {
          "bucket.$": "$.bucket",
          "key.$": "States.Format('{}-transcript.json', $.key)"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Analysis",
      "ResultPath": "$.transcriptData",
      "ResultSelector": {
        "full_text.$": "$.Payload.body.full_text",
        "chunks.$": "$.Payload.body.chunks"
      }
    },
    "Analysis": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Process Chunks for Bedrock",
          "States": {
            "Process Chunks for Bedrock": {
              "Type": "Map",
              "ItemsPath": "$.transcriptData.chunks",
              "Parameters": {
                "chunk.$": "$$.Map.Item.Value",
                "index.$": "$$.Map.Item.Index"
              },
              "Iterator": {
                "StartAt": "Analyze Single Chunk",
                "States": {
                  "Analyze Single Chunk": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "Summarize Chunk",
                        "States": {
                          "Summarize Chunk": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::bedrock:invokeModel",
                            "Parameters": {
                              "ModelId": "anthropic.claude-instant-v1",
                              "Body": {
                                "anthropic_version": "bedrock-2023-05-31",
                                "max_tokens": 256,
                                "messages": [
                                  {
                                    "role": "user",
                                    "content": [
                                      {
                                        "type": "text",
                                        "text": "Your task is to summarize the text provided by the user. Be concise but preserve key details. Respond only once in the form of a brief markdown document."
                                      },
                                      {
                                        "type": "text",
                                        "text": "Summarize the following text:"
                                      },
                                      {
                                        "type": "text",
                                        "text.$": "$.chunk"
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Extract Chunk Topics",
                        "States": {
                          "Extract Chunk Topics": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::bedrock:invokeModel",
                            "Parameters": {
                              "ModelId": "anthropic.claude-instant-v1",
                              "Body": {
                                "anthropic_version": "bedrock-2023-05-31",
                                "max_tokens": 128,
                                "messages": [
                                  {
                                    "role": "user",
                                    "content": [
                                      {
                                        "type": "text",
                                        "text": "Extract 2-3 main topics from this text. Respond in markdown bullet points. Be specific and concise."
                                      },
                                      {
                                        "type": "text",
                                        "text.$": "$.chunk"
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true,
                    "ResultPath": "$.chunkAnalysis"
                  }
                }
              },
              "Next": "Create Overview",
              "ResultPath": "$.chunkResults"
            },
            "Create Overview": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Summarize All Chunks",
                  "States": {
                    "Summarize All Chunks": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::bedrock:invokeModel",
                      "Parameters": {
                        "ModelId": "anthropic.claude-instant-v1",
                        "Body": {
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 512,
                          "messages": [
                            {
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Below are summaries of different sections of a longer text. Create a cohesive overview summary that captures the key points. Write in markdown format."
                                },
                                {
                                  "type": "text",
                                  "text.$": "States.Format('Chunk Summaries:\n\n{}', States.StringToJson(States.Array($.chunkResults[*].chunkAnalysis[0].Body.content[0].text)))"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Consolidate Topics",
                  "States": {
                    "Consolidate Topics": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::bedrock:invokeModel",
                      "Parameters": {
                        "ModelId": "anthropic.claude-instant-v1",
                        "Body": {
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 256,
                          "messages": [
                            {
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Below are topics extracted from different sections of a longer text. Analyze these topics and provide 3-5 main overarching topics that best represent the entire content. Write in markdown bullet points."
                                },
                                {
                                  "type": "text",
                                  "text.$": "States.Format('Section Topics:\n\n{}', States.StringToJson(States.Array($.chunkResults[*].chunkAnalysis[1].Body.content[0].text)))"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true,
              "ResultPath": "$.overviewResults"
            }
          }
        },
        {
          "StartAt": "Process Chunks for Comprehend",
          "States": {
            "Process Chunks for Comprehend": {
              "Type": "Map",
              "ItemsPath": "$.transcriptData.chunks",
              "Parameters": {
                "chunk.$": "$$.Map.Item.Value"
              },
              "Iterator": {
                "StartAt": "Analyze Chunk",
                "States": {
                  "Analyze Chunk": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "DetectEntities",
                        "States": {
                          "DetectEntities": {
                            "Type": "Task",
                            "Parameters": {
                              "Text.$": "$.chunk",
                              "LanguageCode": "en"
                            },
                            "Resource": "arn:aws:states:::aws-sdk:comprehend:detectEntities",
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "DetectSentiment",
                        "States": {
                          "DetectSentiment": {
                            "Type": "Task",
                            "Parameters": {
                              "Text.$": "$.chunk",
                              "LanguageCode": "en"
                            },
                            "Resource": "arn:aws:states:::aws-sdk:comprehend:detectSentiment",
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "End": true,
              "ResultPath": "$.comprehendResults"
            }
          }
        }
      ],
      "Next": "Prepare Analysis Results",
      "ResultPath": "$.parallelResults"
    },
    "Prepare Analysis Results": {
      "Type": "Pass",
      "Parameters": {
        "overview": {
          "Body.$": "$.parallelResults[0].overviewResults[0].Body",
          "ContentType": "application/json"
        },
        "main_topics": {
          "Body.$": "$.parallelResults[0].overviewResults[1].Body",
          "ContentType": "application/json"
        },
        "chunk_summaries.$": "$.parallelResults[0].chunkResults",
        "entities.$": "States.Array($.parallelResults[1].comprehendResults[*][0])",
        "sentiment.$": "States.Array($.parallelResults[1].comprehendResults[*][1])",
        "key.$": "$.key"
      },
      "Next": "Compile Analysis",
      "ResultPath": "$.analysisResult"
    },
    "Compile Analysis": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$.analysisResult",
        "FunctionName": "arn:aws:lambda:us-east-1:816069165876:function:compile_text_analysis_rs"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Write Report",
      "ResultSelector": {
        "report.$": "$.Payload.body"
      },
      "ResultPath": "$.compilationResult"
    },
    "Write Report": {
      "Type": "Task",
      "Parameters": {
        "Body.$": "$.compilationResult.report",
        "Bucket.$": "$.bucket",
        "Key.$": "States.Format('{}-report.md', $.key)",
        "Metadata": {
          "ContentType": "text/markdown",
          "ProcessedDate.$": "$$.State.EnteredTime",
          "AudioFile.$": "$.key"
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "End": true
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
