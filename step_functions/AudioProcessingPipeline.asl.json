{
  "Comment": "Audio file processing with Transcribe, Comprehend, and Bedrock",
  "StartAt": "ValidateInput",
  "States": {
    "ValidateInput": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.bucket",
              "IsPresent": true
            },
            {
              "Variable": "$.key",
              "IsPresent": true
            },
            {
              "Variable": "$.languageCode",
              "IsPresent": true
            }
          ],
          "Next": "StartTranscriptionJob"
        }
      ],
      "Default": "Fail"
    },
    "StartTranscriptionJob": {
      "Type": "Task",
      "Parameters": {
        "Media": {
          "MediaFileUri.$": "States.Format('s3://{}/{}', $.bucket, $.key)"
        },
        "LanguageCode.$": "$.languageCode",
        "TranscriptionJobName.$": "States.Format('{}-{}', $.key, States.UUID())",
        "OutputBucketName.$": "$.bucket",
        "OutputKey.$": "States.Format('{}-transcript.json', $.key)",
        "Settings": {
          "ShowSpeakerLabels": true,
          "MaxSpeakerLabels": 10
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob",
      "Next": "Wait 30 Seconds",
      "ResultPath": "$.startTranscriptionResult"
    },
    "Wait 30 Seconds": {
      "Type": "Wait",
      "Next": "GetTranscriptionJob",
      "Seconds": 30
    },
    "GetTranscriptionJob": {
      "Type": "Task",
      "Parameters": {
        "TranscriptionJobName.$": "$.startTranscriptionResult.TranscriptionJob.TranscriptionJobName"
      },
      "Resource": "arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob",
      "Next": "Job Complete?",
      "ResultPath": "$.getTranscriptionResult",
      "ResultSelector": {
        "status.$": "$.TranscriptionJob.TranscriptionJobStatus"
      }
    },
    "Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.getTranscriptionResult.status",
          "StringEquals": "FAILED",
          "Next": "Fail"
        },
        {
          "Variable": "$.getTranscriptionResult.status",
          "StringEquals": "COMPLETED",
          "Next": "Extract Transcript"
        }
      ],
      "Default": "Wait 30 Seconds"
    },
    "Extract Transcript": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:816069165876:function:extract_transcript_rs",
        "Payload": {
          "bucket.$": "$.bucket",
          "key.$": "States.Format('{}-transcript.json', $.key)"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Analysis",
      "ResultPath": "$.transcriptData",
      "ResultSelector": {
        "full_text.$": "$.Payload.body.full_text",
        "chunks.$": "$.Payload.body.chunks"
      }
    },
    "Analysis": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Bedrock Analysis",
          "States": {
            "Bedrock Analysis": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Summarize",
                  "States": {
                    "Summarize": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::bedrock:invokeModel",
                      "Parameters": {
                        "ModelId": "anthropic.claude-instant-v1",
                        "Body": {
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 512,
                          "messages": [
                            {
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Your task is to summarize the text provided by the user. Respond only once in the form of a brief markdown document. Do not lie or hallucinate."
                                },
                                {
                                  "type": "text",
                                  "text": "Summarize the following the text."
                                },
                                {
                                  "type": "text",
                                  "text.$": "$.transcriptData.full_text"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "DetectTopics",
                  "States": {
                    "DetectTopics": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::bedrock:invokeModel",
                      "Parameters": {
                        "ModelId": "anthropic.claude-instant-v1",
                        "Body": {
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 256,
                          "messages": [
                            {
                              "role": "user",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Your task is to extract the 3 to 5 main topics contained within the text provided by the user. Respond only once in the form of a brief markdown document. Do not lie or hallucinate."
                                },
                                {
                                  "type": "text",
                                  "text": "Extract the topics from the following the text."
                                },
                                {
                                  "type": "text",
                                  "text.$": "$.transcriptData.full_text"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true,
              "ResultPath": "$.bedrockResults"
            }
          }
        },
        {
          "StartAt": "Process Chunks",
          "States": {
            "Process Chunks": {
              "Type": "Map",
              "ItemsPath": "$.transcriptData.chunks",
              "Parameters": {
                "chunk.$": "$$.Map.Item.Value"
              },
              "Iterator": {
                "StartAt": "Analyze Chunk",
                "States": {
                  "Analyze Chunk": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "DetectEntities",
                        "States": {
                          "DetectEntities": {
                            "Type": "Task",
                            "Parameters": {
                              "Text.$": "$.chunk",
                              "LanguageCode": "en"
                            },
                            "Resource": "arn:aws:states:::aws-sdk:comprehend:detectEntities",
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "DetectSentiment",
                        "States": {
                          "DetectSentiment": {
                            "Type": "Task",
                            "Parameters": {
                              "Text.$": "$.chunk",
                              "LanguageCode": "en"
                            },
                            "Resource": "arn:aws:states:::aws-sdk:comprehend:detectSentiment",
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "End": true,
              "ResultPath": "$.chunkResults"
            }
          }
        }
      ],
      "Next": "Prepare Analysis Results",
      "ResultPath": "$.parallelResults"
    },
    "Prepare Analysis Results": {
      "Type": "Pass",
      "Parameters": {
        "summary": {
          "Body.$": "$.parallelResults[0].bedrockResults[0].Body",
          "ContentType": "application/json"
        },
        "topics": {
          "Body.$": "$.parallelResults[0].bedrockResults[1].Body",
          "ContentType": "application/json"
        },
        "entities.$": "States.Array($.parallelResults[1].chunkResults[*][0])",
        "sentiment.$": "States.Array($.parallelResults[1].chunkResults[*][1])",
        "key.$": "$.key"
      },
      "Next": "Compile Analysis",
      "ResultPath": "$.analysisResult"
    },
    "Compile Analysis": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$.analysisResult",
        "FunctionName": "arn:aws:lambda:us-east-1:816069165876:function:compile_text_analysis_rs"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Write Report",
      "ResultSelector": {
        "report.$": "$.Payload.body"
      },
      "ResultPath": "$.compilationResult"
    },
    "Write Report": {
      "Type": "Task",
      "Parameters": {
        "Body.$": "$.compilationResult.report",
        "Bucket.$": "$.bucket",
        "Key.$": "States.Format('{}-report.md', $.key)",
        "Metadata": {
          "ContentType": "text/markdown",
          "ProcessedDate.$": "$$.State.EnteredTime",
          "AudioFile.$": "$.key"
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "End": true
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}
